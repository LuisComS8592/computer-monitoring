[
    {
        "id": "b6168dce6377e5f5",
        "type": "tab",
        "label": "Computer Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5781c8063e55a0c1",
        "type": "mqtt in",
        "z": "b6168dce6377e5f5",
        "name": "",
        "topic": "pc/monitoring",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9a577671f8eb37f5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 40,
        "wires": [
            [
                "a2bc4177e2daa54e",
                "3bf871d5198738ac"
            ]
        ]
    },
    {
        "id": "c928ef2edf09de2f",
        "type": "influxdb batch",
        "z": "b6168dce6377e5f5",
        "influxdb": "f3c9df339623eca4",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "Computer Monitoring",
        "x": 620,
        "y": 40,
        "wires": []
    },
    {
        "id": "a2bc4177e2daa54e",
        "type": "debug",
        "z": "b6168dce6377e5f5",
        "name": "received data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "b89fccb79e9e8722",
        "type": "function",
        "z": "b6168dce6377e5f5",
        "name": "payload",
        "func": "let timestamp = new Date(msg.payload.timestamp).getTime();\n\nlet keyCountsJson = msg.payload.key_counts ? JSON.stringify(msg.payload.key_counts) : null;\nlet topProcessesJson = msg.payload.top_processes ? JSON.stringify(msg.payload.top_processes) : null;\nlet tempsJson = msg.payload.temps ? JSON.stringify(msg.payload.temps) : null;\nlet gpuJson = msg.payload.gpu ? JSON.stringify(msg.payload.gpu) : null;\nlet diskIo = msg.payload.disk_io || {};\nlet netIo = msg.payload.net_io || {};\nlet netSpeed = msg.payload.net_speed || {};\n\nmsg.payload = [\n  {\n    measurement: \"system_metrics\",\n    fields: {\n      cpu: msg.payload.cpu,\n      ram: msg.payload.ram,\n      disk: msg.payload.disk,\n      battery: msg.payload.battery,\n      processes: msg.payload.processes,\n      swap: msg.payload.swap,\n\n      // Net IO\n      upload_MB: netIo.bytes_sent / 1024 / 1024,\n      download_MB: netIo.bytes_recv / 1024 / 1024,\n      upload_speed_MBps: netSpeed.upload_speed_MBps,\n      download_speed_MBps: netSpeed.download_speed_MBps,\n\n      // Disk IO\n      disk_read_count: diskIo.read_count,\n      disk_write_count: diskIo.write_count,\n      disk_read_bytes: diskIo.read_bytes,\n      disk_write_bytes: diskIo.write_bytes,\n\n      // Outras m√©tricas\n      latency_ms: msg.payload.latency_ms,\n      keys_per_min: msg.payload.keys_per_min,\n      mouse_clicks_per_min: msg.payload.mouse_clicks_per_min,\n      idle_time_sec: msg.payload.idle_time_sec,\n\n      // Serializados\n      top_processes_json: topProcessesJson,\n      key_counts_json: keyCountsJson,\n      temps_json: tempsJson,\n      gpu_json: gpuJson,\n\n      // Uptime (calculado)\n      uptime_sec: (Date.now() - new Date(msg.payload.boot_time).getTime()) / 1000,\n\n      // Texto\n      platform: msg.payload.platform\n    },\n    tags: {\n      source: msg.payload.hostname || \"my_pc\"\n    },\n    timestamp: timestamp\n  }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 40,
        "wires": [
            [
                "c928ef2edf09de2f",
                "cc6b0fce8d6803dc"
            ]
        ]
    },
    {
        "id": "aedef7de0bfe8213",
        "type": "debug",
        "z": "b6168dce6377e5f5",
        "name": "decode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 100,
        "wires": []
    },
    {
        "id": "3bf871d5198738ac",
        "type": "function",
        "z": "b6168dce6377e5f5",
        "name": "decode",
        "func": "try {\n    msg.payload = Buffer.from(msg.payload, 'base64').toString('utf8');\n    msg.payload = JSON.parse(msg.payload);\n} catch (err) {\n    node.error(\"Erro ao decodificar base64 ou parsear JSON: \" + err.message, msg);\n    return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "b89fccb79e9e8722",
                "aedef7de0bfe8213"
            ]
        ]
    },
    {
        "id": "cc6b0fce8d6803dc",
        "type": "debug",
        "z": "b6168dce6377e5f5",
        "name": "to influx",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "9a577671f8eb37f5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f3c9df339623eca4",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "Computer Monitoring",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    }
]